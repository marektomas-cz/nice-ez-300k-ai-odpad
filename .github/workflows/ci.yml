name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis, v8js
        coverage: xdebug

    - name: Install V8Js
      run: |
        sudo apt-get update
        sudo apt-get install -y libv8-dev
        sudo pecl install v8js
        echo "extension=v8js.so" | sudo tee -a /etc/php/${{ matrix.php-version }}/cli/conf.d/20-v8js.ini

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.json') }}

    - name: Install Composer dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Set up database
      run: |
        php artisan migrate --force
        php artisan db:seed --class=RolePermissionSeeder

    - name: Run code style check
      run: |
        composer require --dev friendsofphp/php-cs-fixer
        ./vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Run static analysis
      run: |
        composer require --dev phpstan/phpstan
        ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run security analysis
      run: |
        composer require --dev enlightn/security-checker
        ./vendor/bin/security-checker security:check composer.lock

    - name: Run tests
      run: |
        php artisan test --coverage-clover=coverage.xml
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis, v8js

    - name: Install V8Js
      run: |
        sudo apt-get update
        sudo apt-get install -y libv8-dev
        sudo pecl install v8js
        echo "extension=v8js.so" | sudo tee -a /etc/php/8.2/cli/conf.d/20-v8js.ini

    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Build Docker image
      run: |
        docker build -t nice-scripting-solution:${{ github.sha }} .
        docker tag nice-scripting-solution:${{ github.sha }} nice-scripting-solution:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        docker push nice-scripting-solution:${{ github.sha }}
        docker push nice-scripting-solution:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/nice-scripting-solution
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          docker-compose exec -T app php artisan migrate --force
          docker-compose exec -T app php artisan queue:restart
          docker-compose exec -T app php artisan config:cache
          docker-compose exec -T app php artisan route:cache
          docker-compose exec -T app php artisan view:cache

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, redis, v8js

    - name: Install V8Js
      run: |
        sudo apt-get update
        sudo apt-get install -y libv8-dev
        sudo pecl install v8js
        echo "extension=v8js.so" | sudo tee -a /etc/php/8.2/cli/conf.d/20-v8js.ini

    - name: Install dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup test environment
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan migrate --force
        php artisan db:seed --class=RolePermissionSeeder
        php artisan serve &
        sleep 5

    - name: Run performance tests
      run: |
        composer require --dev phpbench/phpbench
        ./vendor/bin/phpbench run tests/Performance --report=default

    - name: Run load tests
      run: |
        sudo apt-get install -y apache2-utils
        ab -n 1000 -c 10 http://localhost:8000/api/health
        ab -n 100 -c 5 http://localhost:8000/scripts -H "Accept: application/json"