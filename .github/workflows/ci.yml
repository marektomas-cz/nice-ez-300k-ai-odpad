name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  DENO_VERSION: '1.39.0'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, bcmath
        tools: composer:v2
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Run Laravel Pint
      run: vendor/bin/pint --test
      
    - name: Run Larastan
      run: vendor/bin/phpstan analyse --memory-limit=2G
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: nice_scripting_test
          MYSQL_USER: nice_scripting
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      deno-executor:
        image: denoland/deno:alpine-1.39.0
        ports:
          - 8080:8080
        options: --health-cmd="deno eval \"fetch('http://localhost:8080/health').then(r => r.ok ? Deno.exit(0) : Deno.exit(1))\"" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, bcmath
        tools: composer:v2
        coverage: xdebug
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Create environment file
      run: |
        cp .env.example .env
        php artisan key:generate --ansi
        
    - name: Configure testing environment
      run: |
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=nice_scripting/DB_DATABASE=nice_scripting_test/' .env
        sed -i 's/DB_USERNAME=nice_scripting/DB_USERNAME=nice_scripting/' .env
        sed -i 's/DB_PASSWORD=secret/DB_PASSWORD=password/' .env
        sed -i 's/REDIS_HOST=redis/REDIS_HOST=127.0.0.1/' .env
        
    - name: Run database migrations
      run: php artisan migrate --force
      
    - name: Run database seeders
      run: php artisan db:seed --force
      
    - name: Execute PHP tests
      run: vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, bcmath
        tools: composer:v2
        
    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Run security audit
      run: composer audit
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      
    - name: Audit NPM dependencies
      run: npm audit --audit-level=high

  deno-executor:
    name: Deno Executor Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}
        
    - name: Cache Deno dependencies
      run: deno cache docker/deno/script_executor.ts
      
    - name: Lint Deno code
      run: deno lint docker/deno/
      
    - name: Format check Deno code
      run: deno fmt --check docker/deno/
      
    - name: Test Deno executor
      run: |
        # Start the executor in background
        deno run --allow-net --allow-env docker/deno/script_executor.ts &
        EXECUTOR_PID=$!
        
        # Wait for startup
        sleep 3
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test script execution
        curl -X POST http://localhost:8080/execute \
          -H "Content-Type: application/json" \
          -d '{"code": "console.log(\"Hello World\");", "context": {}, "timeout": 5000, "memory_limit": 1048576, "client_id": "test", "script_id": "test", "execution_id": "test"}' \
          || exit 1
        
        # Cleanup
        kill $EXECUTOR_PID

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test, security, deno-executor]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build main application
      run: docker build --target production -t nice-scripting-solution:latest .
      
    - name: Build Deno executor
      run: docker build -t deno-executor:latest docker/deno/
      
    - name: Test Docker containers
      run: |
        # Start containers
        docker run --rm --name test-deno -d -p 8080:8080 deno-executor:latest
        docker run --rm --name test-app -d -p 8000:80 nice-scripting-solution:latest
        
        # Wait for startup
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop test-deno test-app

  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push main application
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Deno executor
      uses: docker/build-push-action@v5
      with:
        context: docker/deno
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/deno-executor:latest
          ghcr.io/${{ github.repository }}/deno-executor:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max